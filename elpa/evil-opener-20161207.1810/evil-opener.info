This is evil-opener.info, produced by makeinfo version 6.5 from
evil-opener.texi.

This manual is for evil-opener version 0.2.

   Copyright (C) 2016 Tim Reddehase

     All rights reserved.  This manual must accompany the source code of
     the evil-opener.el package.
INFO-DIR-SECTION Emacs lisp libraries
START-INFO-DIR-ENTRY
* evil-opener: (evil-opener). Seamlessly open files via http(s) in buffer, in evil.
END-INFO-DIR-ENTRY


File: evil-opener.info,  Node: Top,  Next: Overview,  Up: (dir)

Top
***

This manual is for evil-opener.el, version 0.2.

* Menu:

* Overview::
* Installing::
* Using evil-opener::


File: evil-opener.info,  Node: Overview,  Next: Installing,  Prev: Top,  Up: Top

1 Overview
**********

Opener is a small package that hooks into _evil_ and makes it possible
to open URLs directly in a buffer, instead of going the way of
downloading the corresponding file with your browser and then opening
that file manually.  Users of _vim_ (which you most likely were, since
you are using _evil_) might be familar that behaviour already, since it
is built into _vim_.

   However opener doesn't just open any URL in buffer, only those that
it determines correspond to a classic file.  The simple reason for that
is, that normal webpages aren't really intended to be read via
source-code.  Therefore those URLs are still opened in your favorite
browser.  For information on how to customize the workflow and how to
force it to open in a buffer, see *note Using evil-opener::.

   This package is a wrapper-package to provide evil-specific
funtionality to opener.


File: evil-opener.info,  Node: Installing,  Next: Using evil-opener,  Prev: Overview,  Up: Top

2 Installing
************

It is recommended to install opener.el via the MELPA package repository.
However, it is still (as always) possible to do it by hand:

   To manually install opener.el, clone the git repository it into a
location of your choice (usually within your '~/.emacs.d') and add that
location to your 'load-path'.

2.1 Installing from MELPA
=========================

Follow these steps to install Octopress.el from the MELPA repository.

     (require 'package)
     (add-to-list 'package-archives
     	     '("melpa" . "http://melpa.org/packages/") t)

Then refresh your packages list:

     M-x package-refresh-contents RET

And finally, install evil-opener.el:

     M-x package-install RET evil-opener RET

2.2 Activating evil-mappings
============================

The command is defined by default.  Meaning that ':opener' should be
available when the package was loaded.

   As however the 'gf' mapping is overriden by this package, one needs
to opt in by activating the minor mode.  This can be done by calling
'(global-evil-opener-mode)'.

     ; Example for use-package
     (use-package evil-opener
       :config (global-evil-opener-mode))


File: evil-opener.info,  Node: Using evil-opener,  Prev: Installing,  Up: Top

3 Using evil-opener
*******************

Evil-opener automatically hooks into _evil-mode_ and provides the
':opener' ex-state command.  It basically acts the same way as the
standard _evil-mode_ ':edit' ex-state command; meaning that it takes a
FILE or (in this special case) a URL as argument.  If you provide a
normal path to a file, even if it is a _TRAMP_ specified path, it is
opened the same way as you would expect it from the ':edit' command.

   If the argument however pertains to a URL in the http or https
scheme, it will either open the corresponding HTTP-response in a buffer,
if that URL seems to be corresponding to a classic file (for information
about that see the corresponding section in the _opener_ manual).
Otherwise it will open up a browser at that URL.

   Same as the standard ':edit' command the ':opener' command also
accepts a bang.  If ':opener!' gets executed the argument, if it is a
URL in http or https scheme, is always opened in a buffer, no matter if
it is a directory- or file-like URL. If it however is a FILE, the bang
gets propagated to the underlying ':edit' command.

   While the ':opener' command doesn't override the normal ':edit'
command — meaning that one still performs its normal operations — opener
overrides another command: 'gf' in normal-state.  'gf' is usually seen
as a mnemonic for _go to file_ and opens the filepath at point.  However
opener seamlessly hooks into that and allows you to open file-like URLs
in a buffer as well, in any other URL-case it tries to open the URL at
point in a browser and in any other case falls back to the default
behaviour of finding the file at point.

   On a side-note: Opener automatically unzips the contents of the
buffer with _zlib_, if possible.

3.1 Using opener without evil
=============================

Just requiring the _opener_ package instead of the _evil-opener_ package
should do the trick.  For the provided commands see the documentation of
the _opener_ package.

3.2 Customizing opener to my needs
==================================

For information of how to configure _opener_ see the original
_opener_-package documentation.


Tag Table:
Node: Top434
Node: Overview619
Node: Installing1589
Node: Using evil-opener2860

End Tag Table
